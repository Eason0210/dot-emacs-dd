#+AUTHOR: Doug Davis
#+STARTUP: indent

* Startup

#+begin_src emacs-lisp :results silent
  ;; Use .el if it is newer
  (when (boundp 'load-prefer-newer)
    (setq load-prefer-newer t))

  (when (or (eq system-type 'darwin)
            (eq system-type 'gnu/linux))
    (setq default-directory "~/"))

  (fset 'yes-or-no-p 'y-or-n-p)

  ;; this init.el file is designed to be a symlink to the init.el file
  ;; in my `emacs.d` git repo.  this ensures the git repo can live
  ;; anywhere
  (add-to-list 'load-path (directory-file-name
                           (file-name-directory
                            (file-truename
                             (concat user-emacs-directory "init.el")))))

  (setq custom-file (concat user-emacs-directory "custom.el"))

  (setq user-mail-address "ddavis@ddavis.io"
        user-login-name "ddavis"
        user-full-name "Doug Davis")
#+end_src

* Variables

#+begin_src emacs-lisp :results silent
  (defconst ddavis-v-is-mac (eq system-type 'darwin)
    "true if on a Mac")

  (defconst ddavis-v-is-cc7 (string= (system-name) "cc7")
    "true if on cc7 box")

  (defconst ddavis-v-is-grads-18 (string= (system-name) "grads-18.internal.phy.duke.edu")
    "true if on grads-18 Duke physics machine")

  (defconst ddavis-v-is-pion (string= (system-name) "pion")
    "true if on pion box")

  (defconst ddavis-v-is-dobian (string= (system-name) "dobian")
    "true if on dobian box")

  (defconst ddavis-v-is-linux-desktop (or ddavis-v-is-pion ddavis-v-is-cc7)
    "true if on either pion or cc7")

  (defconst ddavis-v-enable-mu4e
    (or ddavis-v-is-mac
        ddavis-v-is-pion
        ddavis-v-is-cc7
        ddavis-v-is-grads-18)
    "a flag for conditionally setting up mu4e stuff")

  (defconst ddavis-v-enable-irc
    (or ddavis-v-is-mac
        ddavis-v-is-pion
        ddavis-v-is-dobian
        ddavis-v-is-grads-18
        ddavis-v-is-cc7)
    "a flag for conditionally setting up erc and circe")

  (defconst ddavis-v-clangd-exe
    (cond (ddavis-v-is-mac "~/Software/LLVM/releases/10.x/bin/clangd")
          (ddavis-v-is-cc7 "~/Software/LLVM/releases/10.0.0/bin/clangd")
          (ddavis-v-is-grads-18 "~/Software/LLVM/releases/master/bin/clangd")
          (ddavis-v-is-dobian "/usr/bin/clangd")
          (ddavis-v-is-pion "/usr/bin/clangd"))
    "machine dependent clangd executable string")

  (defconst ddavis-v-clang-exe
    (cond (ddavis-v-is-mac "~/Software/LLVM/releases/10.x/bin/clang")
          (ddavis-v-is-cc7 "~/Software/LLVM/releases/10.0.0/bin/clang")
          (ddavis-v-is-grads-18 "~/Software/LLVM/releases/master/bin/clang")
          (ddavis-v-is-dobian "/usr/bin/clang")
          (ddavis-v-is-pion "/usr/bin/clang"))
    "machine dependent clang executable string")

  (defconst ddavis-v-clang-format-exe
    (cond (ddavis-v-is-mac "~/Software/LLVM/releases/10.x/bin/clang-format")
          (ddavis-v-is-cc7 "~/Software/LLVM/releases/10.0.0/bin/clang-format")
          (ddavis-v-is-grads-18 "~/Software/LLVM/releases/master/bin/clang-format")
          (ddavis-v-is-dobian "/usr/bin/clang-format")
          (ddavis-v-is-pion "/usr/bin/clang-format"))
    "machine dependent clang-format executable string")

  (defconst ddavis-v-rg-exe
    (cond (ddavis-v-is-mac "/usr/local/bin/rg")
          (ddavis-v-is-cc7 "~/.cargo/bin/rg")
          (ddavis-v-is-grads-18 "~/.cargo/bin/rg")
          (ddavis-v-is-dobian "~/.cargo/bin/rg")
          (ddavis-v-is-pion "/usr/bin/rg"))
    "machine dependent ripgrep executable string")

  (defconst ddavis-v-fd-exe
    (cond (ddavis-v-is-mac "/usr/local/bin/fd")
          (ddavis-v-is-cc7 "~/.cargo/bin/fd")
          (ddavis-v-is-grads-18 "~/.cargo/bin/fd")
          (ddavis-v-is-dobian "~/.cargo/bin/fd")
          (ddavis-v-is-pion "/usr/bin/fd"))
    "machine dependent fd executable string")

  (defconst ddavis-v-sendmail-program
    (cond (ddavis-v-is-mac "~/Software/localbase/bin/msmtp")
          (ddavis-v-is-cc7 "~/Software/localbase/bin/msmtp")
          (ddavis-v-is-grads-18 "/usr/bin/msmtp")
          (ddavis-v-is-pion "/usr/bin/msmtp"))
    "machine dependent msmtp executable string")

  (defconst ddavis-v-mu-exe
    (cond (ddavis-v-is-mac "~/Software/mu/releases/1.3.9/bin/mu")
          (ddavis-v-is-cc7 "/usr/local/bin/mu")
          (ddavis-v-is-grads-18 "~/Software/localbase/bin/mu")
          (ddavis-v-is-pion "/usr/bin/mu"))
    "machine dependent mu executable string")

  (defconst ddavis-v-mu4e-dir
    (cond (ddavis-v-is-mac "~/Software/mu/releases/1.3.9/share/emacs/site-lisp/mu4e")
          (ddavis-v-is-grads-18 "~/Software/localbase/share/emacs/site-lisp/mu4e")
          (ddavis-v-is-cc7 "/usr/local/share/emacs/site-lisp/mu4e")
          (ddavis-v-is-pion "/usr/share/emacs/site-lisp/mu4e"))
    "machine dependent mu4e installation location string")
#+end_src

* Package

#+begin_src emacs-lisp :results silent
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t
          auto-package-update-interval 5)
    (auto-package-update-maybe))
#+end_src

* Utils

#+begin_src emacs-lisp :results silent
  (defun ddavis/enable-cua-selection ()
    "turn on cua-selection-mode"
    (interactive)
    (cua-selection-mode t))

  ;; See the following for more details
  ;;     https://emacs.stackexchange.com/a/50215/8887
  ;; and also see the following on a recent GNU/Linux or similar system:
  ;;     /usr/share/doc/fontconfig/fontconfig-user.html
  ;; for the explanation of spacing=100
  ;; also see the following UNIX StackExchange answer:
  ;;    https://unix.stackexchange.com/a/363368/13105
  (defun ddavis/compare-monospace-font-families ()
    "Display a list of all monospace font faces. Tested on GNU/Linux."
    (interactive)
    (pop-to-buffer "*Monospace Fonts*")
    (erase-buffer)
    (dolist (font-name (seq-filter (lambda (font)
                                     (when-let ((info (font-info font)))
                                       (string-match-p "spacing=100" (aref info 1))))
                                   (font-family-list)))
      (insert
       (propertize
        (concat "1 l; 0 O o [ < = > ] " font-name ")\n")
        'font-lock-face `((:family
                           ,(format "%s" (font-get (font-spec :name font-name) :family))))))))

  (defun ddavis/move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun ddavis/move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  (defun ddavis/copy-lines-matching-re (re)
    "put lines matching re in a buffer named *matching*"
    (interactive "sRegexp to match: ")
    (let ((result-buffer (get-buffer-create "*matching*")))
      (with-current-buffer result-buffer
        (erase-buffer))
      (save-match-data
        (save-excursion
          (goto-char (point-min))
          (while (re-search-forward re nil t)
            (princ (buffer-substring-no-properties (line-beginning-position)
                                                   (line-beginning-position 2))
                   result-buffer))))
      (pop-to-buffer result-buffer)))

  (defun ddavis/toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

  (defun ddavis/cleanup-tramp ()
    (interactive)
    (tramp-cleanup-all-buffers)
    (tramp-cleanup-all-connections)
    (find-file "~/."))
#+end_src

* Org

#+begin_src emacs-lisp :results silent
  (use-package org
    :config
    (setq org-src-fontify-natively t)
    (setq org-structure-template-alist
          (append org-structure-template-alist
                  '(("el" . "src emacs-lisp :results silent")
                    ("py" . "src python :results silent")
                    ("cpp" . "src C++")))))

  (when ddavis-v-is-mac
    (define-key org-mode-map (kbd "<A-down>") 'org-move-subtree-down)
    (define-key org-mode-map (kbd "<A-up>") 'org-move-subtree-up)
    (define-key org-mode-map (kbd "<A-left>") 'org-promote-subtree)
    (define-key org-mode-map (kbd "<A-right>") 'org-demote-subtree))

  (unless ddavis-v-is-mac
    (define-key org-mode-map (kbd "<s-down>") 'org-move-subtree-down)
    (define-key org-mode-map (kbd "<s-up>") 'org-move-subtree-up)
    (define-key org-mode-map (kbd "<s-left>") 'org-promote-subtree)
    (define-key org-mode-map (kbd "<s-right>") 'org-demote-subtree))

  (use-package ox-md
    :after ox)

  (use-package ox-hugo
    :ensure t
    :after ox)

  (use-package ox-reveal
    :ensure t
    :after ox)

  (use-package htmlize
    :ensure t)

  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((python . t)))

  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-agenda-files (list "~/Dropbox/org/agenda/"))
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((agenda "")
            (alltodo "")))))
#+end_src

* Projectile

#+begin_src emacs-lisp :results silent
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    ;; define my own projects
    (setq projectile-track-known-projects-automatically nil)
    (define-key projectile-mode-map (kbd "C-c P") 'projectile-command-map))

  (defun ddavis/projectile-proj-find-function (dir)
    (let ((root (projectile-project-root dir)))
      (and root (cons 'transient root))))

  (with-eval-after-load 'project
    (add-to-list 'project-find-functions 'ddavis/projectile-proj-find-function))
#+end_src

* Helm

#+begin_src emacs-lisp :results silent
  (use-package helm
    :ensure t
    :init (setq helm-autoresize-max-height 50
                helm-autoresize-min-height 30)
    :bind (("C-x C-f" . helm-find-files)
           ("C-x C-t" . find-file)
           ("C-x r b" . helm-bookmarks)
           ("C-x m" . helm-M-x)
           ("C-x b" . helm-buffers-list)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action)
           :map helm-command-map
           ("r" . ddavis/helm-project-search))
    :config
    (require 'helm-config)
    (setq helm-split-window-in-side-p t
          helm-split-window-default-side 'below
          helm-idle-delay 0.0
          helm-input-idle-delay 0.01
          helm-quick-update t
          helm-ff-skip-boring-files t)
    (helm-autoresize-mode 1)
    (helm-mode 1))

  (setq helm-grep-ag-command (concat ddavis-v-rg-exe
                                     " --color=always"
                                     " --smart-case"
                                     " --no-heading"
                                     " --line-number %s %s %s")
        helm-grep-file-path-style 'relative)

  (defun ddavis/helm-rg (directory &optional with-types)
    "Search in DIRECTORY with ripgrep.
  With WITH-TYPES, ask for file types to search in."
    (interactive "P")
    (require 'helm-adaptive)
    (helm-grep-ag-1 (expand-file-name directory)
                    (helm-aif (and with-types
                                   (helm-grep-ag-get-types))
                        (helm-comp-read
                         "RG type: " it
                         :must-match t
                         :marked-candidates t
                         :fc-transformer 'helm-adaptive-sort
                         :buffer "*helm rg types*"))))

  (defun ddavis/helm-project-search (&optional with-types)
    "Search in current project with rippgrep.
  With WITH-TYPES, ask for file types to search in."
    (interactive "P")
    (ddavis/helm-rg (projectile-project-root) with-types))

  (use-package helm-projectile
    :ensure t
    :init (setq projectile-completion-system 'helm
                helm-split-window-in-side-p t)
    :bind (:map helm-command-map
                ("p" . helm-projectile))
    :demand)

  (use-package helm-fd
    :ensure t
    :demand
    :init (setq helm-fd-cmd ddavis-v-fd-exe)
    :bind (:map helm-command-map
                ("/" . helm-fd)
                ("f" . helm-fd-project)))

  (use-package helm-descbinds
    :ensure t
    :demand
    :bind (("C-h b" . helm-descbinds)))
#+end_src

* eshell

#+begin_src emacs-lisp :results silent
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
  current buffer's file. The eshell is renamed to match that
  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((height (/ (window-total-height) 3)))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (insert (concat "ls"))
      (eshell-send-input)))
  (bind-key "C-!" 'eshell-here)

  (defun eshell/clear ()
    (let ((inhibit-read-only t))
      (erase-buffer)))

  (defun eshell/close ()
    (delete-window))
#+end_src

* Company

#+begin_src emacs-lisp :results silent
  (use-package company
    :ensure t
    :init
    :config
    (setq company-clang-executable ddavis-v-clang-exe)
    (setq company-minimum-prefix-length 2) ;; default is 3
    (setq company-idle-delay 0.1) ;; default is 0.2
    (add-hook 'emacs-lisp-mode-hook 'company-mode)
    (add-hook 'python-mode-hook 'company-mode)
    (add-hook 'mu4e-compose-mode-hook 'company-mode)
    (add-hook 'sh-mode-hook 'company-mode)
    (add-hook 'LaTeX-mode-hook 'company-mode))
#+end_src

* Version control

Basically just [[https://magit.vc/][magit]].

#+begin_src emacs-lisp :results silent
  (setq vc-follow-symlinks t)

  (defun ddavis/magit-kill-buffers ()
    "See `https://manuel-uberti.github.io/emacs/2018/02/17/magit-bury-buffer/'"
    (interactive)
    (let ((buffers (magit-mode-get-buffers)))
      (magit-restore-window-configuration)
      (mapc #'kill-buffer buffers)))

  (use-package magit
    :ensure t
    :demand
    :bind ("C-x g" . 'magit-status)
    :config
    (bind-key "q" #'ddavis/magit-kill-buffers magit-status-mode-map))
#+end_src

* LSP and Eglot

Configuration for [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] or [[https://github.com/joaotavora/eglot][eglot]].

#+begin_src emacs-lisp :results silent
  (setq read-process-output-max (* 2 1024 1024))

  (use-package lsp-mode
    :ensure t
    :commands lsp
    :init
    (setq lsp-clients-clangd-executable ddavis-v-clangd-exe)
    (setq lsp-prefer-capf t)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-auto-guess-root t))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :init
    (setq lsp-ui-sideline-show-hover nil))

  (use-package lsp-python-ms
    :ensure t)

  (use-package company-lsp
    :ensure t
    :commands company-lsp)

  (use-package eglot
    :ensure t)
#+end_src

* Python

#+begin_src emacs-lisp :results silent
  (use-package pyvenv
    :ensure t
    :config
    (setenv "WORKON_HOME" "~/.pyenv/versions"))

  (defun ddavis/get-pyvenv-name ()
    "grab the name of the active pyvenv (nil if not defined)"
    (when pyvenv-virtual-env
      (car (last (split-string (directory-file-name pyvenv-virtual-env) "/")))))

  (defun ddavis/py-auto-lsp ()
    "turn on lsp mode in a Python project by trying to
  automatically determine which pyenv virtual environment to
  activate based on the project name"
    (interactive)
    (if (and pyvenv-virtual-env
             (file-directory-p pyvenv-virtual-env)
             (string= projectile-project-name (ddavis/get-pyvenv-name)))
        (lsp)
      (pyvenv-workon (projectile-project-name))
      (if (file-directory-p pyvenv-virtual-env)
          (lsp)
        (progn
          (message (format "%s does not exist, set manually"
                           pyvenv-virtual-env))
          (call-interactively #'pyvenv-workon)
          (lsp)))))

  (use-package elpy
    :ensure t)

  (use-package blacken
    :ensure t)

  (defun ddavis/eglot-prep-for-python ()
    "prepare python eglot setup"
    (interactive)
    (setq company-backends (cons 'company-capf (remove 'company-capf company-backends)))
    (add-to-list 'eglot-server-programs '(python-mode . ("pyls"))))
#+end_src

* C++

#+begin_src emacs-lisp :results silent
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.icc\\'" . c++-mode))

  (defun ddavis/eglot-prep-for-cpp ()
    "enable variables and hooks for eglot cpp IDE"
    (interactive)
    (require 'eglot)
    (setq company-backends (cons 'company-capf (remove 'company-capf company-backends)))
    (add-to-list 'eglot-server-programs `((c++-mode cc-mode) ,ddavis-v-clangd-exe)))

  (use-package clang-format
    :ensure t
    :config
    (setq clang-format-executable ddavis-v-clang-format-exe))

  (use-package modern-cpp-font-lock
    :ensure t
    :hook (c++-mode . modern-c++-font-lock-mode))
#+end_src

* TeX

#+begin_src emacs-lisp :results silent
  (setq-default TeX-master nil)

  (setq font-latex-fontify-sectioning 1.0
        font-latex-fontify-script nil)

  (use-package helm-bibtex
    :ensure t)

  (use-package company-bibtex
    :ensure t)

  (when ddavis-v-is-mac
    (add-to-list 'company-backends 'company-bibtex)
    (setq company-bibtex-bibliography
          '("/Users/ddavis/Desktop/thesis/biblio/refs.bib"))
    (setq bibtex-completion-bibliography
          '("/Users/ddavis/Desktop/thesis/biblio/refs.bib")))

  (defun ddavis/work-on-thesis ()
    (interactive)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t)
    (when (file-exists-p "~/Desktop/thesis/dissertation.tex")
      (find-file "~/Desktop/thesis/dissertation.tex"))
    (when (file-exists-p "~/Documents/thesis/dissertation.tex")
      (find-file "~/Documents/thesis/dissertation.tex")))
#+end_src

* Spell

Add some flyspell hooks for a few modes.

#+begin_src emacs-lisp :results silent
  (mapc
   (lambda (language-mode-hook)
     (add-hook language-mode-hook 'flyspell-mode))
   '(org-mode-hook
     LaTeX-mode-hook
     markdown-mode-hook
     message-mode-hook
     mu4e-compose-mode-hook))
#+end_src

* Looks
** themes

#+begin_src emacs-lisp :results silent
  (setq custom-safe-themes t)

  ;; currently using my fork of emacs-theme-gruvbox on mac
  (use-package gruvbox
    :if (or ddavis-v-is-mac ddavis-v-is-cc7)
    :load-path "~/.emacs.d/git-repos/emacs-theme-gruvbox"
    :config
    (add-to-list 'custom-theme-load-path "~/.emacs.d/git-repos/emacs-theme-gruvbox")
    (load-theme 'gruvbox t))

  (use-package gruvbox-theme
    :ensure t
    :unless (or ddavis-v-is-mac ddavis-v-is-cc7)
    :config
    (load-theme 'gruvbox t))

  (let ((line (face-attribute 'mode-line :underline)))
    (set-face-attribute 'mode-line           nil :overline   line)
    (set-face-attribute 'mode-line-inactive  nil :overline   line)
    (set-face-attribute 'mode-line-inactive  nil :underline  line)
    (set-face-attribute 'mode-line           nil :box        nil)
    (set-face-attribute 'mode-line-inactive  nil :box        nil)
    (set-face-attribute 'mode-line-buffer-id nil :box        nil))

  (global-display-line-numbers-mode)
  (setq column-number-mode t)
#+end_src

** fonts

#+begin_src emacs-lisp :results silent
  (when window-system

    (when ddavis-v-is-cc7
      (set-face-attribute 'default nil
                          :family "JetBrains Mono"
                          :weight 'medium
                          :height 130))

    (when ddavis-v-is-mac
      (setq mac-allow-anti-aliasing t)
      (set-face-attribute 'default nil
                          :family "JetBrains Mono"
                          :weight 'medium
                          :height 120))

    (when ddavis-v-is-pion
      (set-face-attribute 'default nil
                          :family "Source Code Pro"
                          :weight 'semibold
                          :height 130))

    (when ddavis-v-is-dobian
      (set-face-attribute 'default nil
                          :family "Terminus (TTF)"
                          :weight 'regular
                          :height 90))

    (add-to-list 'default-frame-alist '(height . 72))
    (add-to-list 'default-frame-alist '(width . 234)))
#+end_src

** extend

from https://github.com/emacs-helm/helm/issues/2213; Fix issue with
the new :extend face attribute in emacs-27 Prefer to extend to EOL as
in previous emacs.

#+begin_src emacs-lisp :results silent
  (defun tv/extend-faces-matching (regexp)
    (cl-loop for f in (face-list)
             for face = (symbol-name f)
             when (and (string-match regexp face)
                       (eq (face-attribute f :extend t 'default)
                           'unspecified))
             do (set-face-attribute f nil :extend t)))

  (defun ddavis/init-extend-faces ()
    (when (fboundp 'set-face-extend)
      (with-eval-after-load "mu4e"
        (tv/extend-faces-matching "\\`mu4e"))
      (with-eval-after-load "org"
        (tv/extend-faces-matching "\\`org"))
      (with-eval-after-load "magit"
        (tv/extend-faces-matching "\\`magit"))
      (with-eval-after-load "helm"
        (tv/extend-faces-matching "\\`helm"))))

  (ddavis/init-extend-faces)
#+end_src

* Auth

Setting up authentication with encryption

#+begin_src emacs-lisp :results silent
  (require 'epa-file)
  ;; authinfo
  (setq auth-sources '("~/.emacs.d/.authinfo.gpg"))
  (if ddavis-v-is-mac
      (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg"))
    (custom-set-variables '(epg-gpg-program "/usr/bin/gpg2")))
  (epa-file-enable)
#+end_src

* Misc
** Bindings

#+begin_src emacs-lisp :results silent
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
  (global-set-key (kbd "C-x \\") 'ddavis/toggle-window-split)

  (global-unset-key (kbd "C-d"))
  (global-set-key (kbd "C-d f") (lambda () (interactive)
                                  (find-file "~/.emacs.d/dot-emacs/emacs-init.org")))
#+end_src

** Random

#+begin_src emacs-lisp :results silent
  ;; misc seq's
  (setq ring-bell-function 'ignore)
  (setq echo-keystrokes 0.001)
  (setq inhibit-startup-screen t)
  (setq tramp-default-method "ssh")
  (setq-default show-paren-delay 0)
  (setq-default indent-tabs-mode nil)

  ;; we don't like Emacs backups
  (setq auto-save-list-file-prefix nil
        create-lockfiles nil
        auto-save-list-file-prefix nil
        backup-by-copying t
        backup-directory-alist '(("." . "~/.saves"))
        delete-old-versions t
        kept-new-versions 3
        kept-old-versions 2
        version-control t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (show-paren-mode 1)

  ;; delete trailing whitepace in a few modes
  (mapc
   (lambda (language-mode-hook)
     (add-hook language-mode-hook
               (lambda ()
                 (add-to-list 'write-file-functions 'delete-trailing-whitespace))))
   '(text-mode-hook
     c-mode-common-hook
     emacs-lisp-mode-hook
     python-mode-hook
     markdown-mode-hook
     bash-mode-hook
     sh-mode-hook
     cmake-mode-hook
     fundamental-mode-hook
     LaTeX-mode-hook))
#+end_src

** Some packages

#+begin_src emacs-lisp :results silent
  (use-package neotree
    :ensure t
    :config
    (global-set-key [f8] 'neotree-project-dir)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)
          neo-smart-open t
          neo-autorefresh nil))

  (use-package which-key
    :ensure t
    :hook (after-init . which-key-mode))

  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)

  (use-package iedit
    :ensure t
    :bind ("C-c ;" . 'iedit-mode))

  (use-package cmake-mode
    :ensure t)

  (use-package markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode))

  (use-package yaml-mode
    :ensure t
    :mode (("\\.yml\\'" . yaml-mode)
           ("\\.yaml\\'" . yaml-mode)))

  (use-package deadgrep
    :ensure t)

  (use-package ace-window
    :ensure t
    :bind ("M-o" . 'ace-window))

  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :ensure t
    :config
    (exec-path-from-shell-initialize))

  (use-package diredfl
    :ensure t
    :hook (dired-mode . diredfl-mode))
#+end_src

** Modes

#+begin_src emacs-lisp :results silent
  (use-package emacs
    :mode (("mbsyncrc" . conf-mode)
           ("msmtprc" . conf-mode)))
#+end_src

* Elfeed

#+begin_src emacs-lisp :results silent
  (use-package elfeed
    :ensure t
    :bind ("C-x w" . 'elfeed)
    :config
    (setq elfeed-feeds
          '(("https://planet.scipy.org/feed.xml" python)
            ("https://planet.emacslife.com/atom.xml" emacs)
            ("https://ddavis.io/index.xml" blog)
            ("http://pragmaticemacs.com/feed/" emacs)
            ("http://feeds.podtrac.com/zKq6WZZLTlbM" nyt podcast)
            ("https://www.npr.org/rss/podcast.php?id=510310" npr podcast)
            ("https://www.npr.org/rss/podcast.php?id=510318" npr podcast)))

    (defvar ddavis-v-podcast-speed "1.33")

    (defun elfeed-play-enclosure-with-mpv ()
      "Play enclosure link with mpv."
      (interactive)
      (let ((speed ddavis-v-podcast-speed)
            (podcast-link (nth 0 (car (elfeed-entry-enclosures elfeed-show-entry)))))
        (message "Opening %s with with mpv..." podcast-link)
        (start-process "elfeed-mpv" nil "mpv"
                       "--speed" speed
                       podcast-link)))

    ;; Entries older than 2 weeks are marked as read
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "3 weeks ago"
                                  :remove 'unread))

    (setq-default elfeed-search-filter "@10-days-ago"))
#+end_src

* Browser

#+begin_src emacs-lisp :results silent
  (when ddavis-v-is-cc7
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "/home/ddavis/Software/localbase/bin/firefox"))

  (when ddavis-v-is-pion
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "firefox-developer-edition"))
#+end_src

* Dired

#+begin_src emacs-lisp :results silent
  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-dired
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (add-hook 'dired-mode-hook
            (lambda () (local-set-key (kbd "q") #'kill-current-buffer)))
#+end_src

* macOS

Some configuration specific to using Emacs on macOS.

#+begin_src emacs-lisp :results silent
  (defun ddavis/delete-frame-or-window ()
    "if we have multiple frames delete the current one, if only one
  delete the window; this is really just for binding Command+w to
  behave similar to other macOS applications."
    (interactive)
    (if (< (count-windows) 2)
        (delete-frame)
      (delete-window)))

  (defun ddavis/switch-to-or-start-gnus ()
    "if we have a '*Group*' buffer go and and switch to it; if not
  spin up gnus. just for binding to s-u on macOS."
    (interactive)
    (if (get-buffer "*Group*")
        (switch-to-buffer "*Group*")
      (gnus)))

  (when (memq window-system '(mac ns))
    (setq browse-url-browser-function 'browse-url-default-macosx-browser)
    (setq-default ns-alternate-modifier 'meta)
    (setq-default mac-option-modifier 'meta)
    (setq-default ns-right-alternate-modifier nil)
    (setq-default ns-command-modifier 'super)
    (setq-default mac-command-modifier 'super)
    (setq-default ns-function-modifier 'hyper)
    (setq-default mac-function-modifier 'hyper)
    (global-set-key [(meta shift up)]  'ddavis/move-line-up)
    (global-set-key [(meta shift down)]  'ddavis/move-line-down)
    (global-set-key (kbd "s-/") 'previous-buffer)
    (global-set-key (kbd "s-\\") 'ddavis/toggle-window-split)
    (global-set-key (kbd "s-1") 'delete-other-windows)
    (global-set-key (kbd "s-2") 'split-window-below)
    (global-set-key (kbd "s-3") 'split-window-right)
    (global-set-key (kbd "s-5") 'projectile-find-file-in-known-projects)
    (global-set-key (kbd "s-4") 'mu4e)
    (global-set-key (kbd "s-d") (lambda () (interactive)
                                  (find-file "~/.emacs.d/dot-emacs/emacs-init.org")))
    (global-set-key (kbd "s-b") 'helm-buffers-list)
    (global-set-key (kbd "s-f") 'helm-find-files)
    (global-set-key (kbd "s-g") 'magit-status)
    (global-set-key (kbd "s-o") 'other-window)
    (global-set-key (kbd "s-p") 'helm-projectile)
    (global-set-key (kbd "s-r") 'ddavis/helm-project-search)
    (global-set-key (kbd "s-t") 'neotree-toggle)
    (global-set-key (kbd "s-u") 'ddavis/switch-to-or-start-gnus)
    (global-set-key (kbd "s-w") 'ddavis/delete-frame-or-window)
    (global-unset-key (kbd "s-t")))
#+end_src

* Email
** sending mail

#+begin_src emacs-lisp :results silent
  (setq message-send-mail-function 'message-send-mail-with-sendmail
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-kill-buffer-on-exit t)

  (setq sendmail-program ddavis-v-sendmail-program)

  (defun ddavis/reset-standard-name-and-email ()
    (interactive)
    (setq user-mail-address "ddavis@ddavis.io"
          user-email-address "ddavis@ddavis.io"
          user-full-name "Doug Davis"))
#+end_src

** indexing mail with mu4e

My [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] setup

#+begin_src emacs-lisp :results silent
  (with-eval-after-load "mm-decode"
    (add-to-list 'mm-discouraged-alternatives "text/html")
    (add-to-list 'mm-discouraged-alternatives "text/richtext"))

  (when ddavis-v-enable-mu4e
    (add-to-list 'load-path ddavis-v-mu4e-dir)
    (require 'mu4e)

    (setq mu4e-mu-binary ddavis-v-mu-exe)

    (setq mu4e-change-filenames-when-moving t
          mu4e-get-mail-command "true"
          mu4e-update-interval 120
          mu4e-maildir "~/.mail"
          mu4e-confirm-quit nil
          mu4e-context-policy 'pick-first
          mu4e-user-mail-address-list '()
          mu4e-attachment-dir (expand-file-name "~/Downloads/")
          mu4e-change-filenames-when-moving t)

    (defun ddavis/mu4e-jump-via-helm ()
      (interactive)
      (let ((maildir (helm-comp-read "Maildir: " (mu4e-get-maildirs))))
        (mu4e-headers-search (format "maildir:\"%s\"" maildir))))

    (define-key global-map (kbd "C-c 4") 'mu4e)
    (define-key mu4e-headers-mode-map "j" 'ddavis/mu4e-jump-via-helm)
    (define-key mu4e-view-mode-map "j" 'ddavis/mu4e-jump-via-helm)
    (define-key mu4e-main-mode-map "j" 'ddavis/mu4e-jump-via-helm)
    (define-key mu4e-headers-mode-map (kbd "C-c k") 'mu4e-kill-update-mail)
    (define-key mu4e-view-mode-map (kbd "C-c k") 'mu4e-kill-update-mail)
    (define-key mu4e-main-mode-map (kbd "C-c k") 'mu4e-kill-update-mail)
    (define-key mu4e-headers-mode-map "d" 'mu4e-headers-mark-for-delete)
    (define-key mu4e-headers-mode-map "D" 'mu4e-headers-mark-for-trash)
    (define-key mu4e-view-mode-map "d" 'mu4e-view-mark-for-delete)
    (define-key mu4e-view-mode-map "D" 'mu4e-view-mark-for-trash)

    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "cern"
               :enter-func (lambda () (mu4e-message "Entering CERN context"))
               :leave-func (lambda () (ddavis/reset-standard-name-and-email))
               :match-func (lambda (msg)
                             (when msg
                               (string-match-p "^/cern" (mu4e-message-field msg :maildir))))
               :vars '( ( user-mail-address      . "ddavis@cern.ch" )
                        ( user-email-address     . "ddavis@cern.ch" )
                        ( user-full-name         . "Doug Davis" )
                        ( mu4e-trash-folder      . "/cern/Trash" )
                        ( mu4e-sent-folder       . "/cern/Sent" )
                        ( mu4e-drafts-folder     . "/cern/Drafts" )
                        ( mu4e-reply-to-address  . "ddavis@cern.ch" )))

             ,(make-mu4e-context
               :name "duke"
               :enter-func (lambda () (mu4e-message "Entering Duke context"))
               :leave-func (lambda () (ddavis/reset-standard-name-and-email))
               :match-func (lambda (msg)
                             (when msg
                               (string-match-p "^/duke" (mu4e-message-field msg :maildir))))
               :vars '( ( user-mail-address       . "ddavis@phy.duke.edu" )
                        ( user-email-address      . "ddavis@phy.duke.edu" )
                        ( user-full-name          . "Doug Davis" )
                        ( mu4e-trash-folder       . "/duke/Trash" )
                        ( mu4e-sent-folder        . "/duke/Sent" )
                        ( mu4e-drafts-folder      . "/duke/Drafts" )
                        ( mu4e-reply-to-address   . "ddavis@phy.duke.edu" )))))

    (when (or ddavis-v-is-mac ddavis-v-is-cc7 ddavis-v-is-pion)
      (add-to-list 'mu4e-contexts
                   (make-mu4e-context
                    :name "gmail"
                    :enter-func (lambda () (mu4e-message "Entering Gmail context"))
                    :leave-func (lambda () (ddavis/reset-standard-name-and-email))
                    :match-func (lambda (msg)
                                  (when msg
                                    (string-match-p "^/gmail" (mu4e-message-field msg :maildir))))
                    :vars '( ( user-mail-address           . "douglas.davis.092@gmail.com" )
                             ( user-email-address          . "douglas.davis.092@gmail.com" )
                             ( user-full-name              . "Doug Davis" )
                             ( mu4e-trash-folder           . "/gmail/_blackhole" )
                             ( mu4e-sent-folder            . "/gmail/[Gmail]/Sent Mail" )
                             ( mu4e-drafts-folder          . "/gmail/_blackhole" )
                             ( mu4e-reply-to-address       . "douglas.davis.092@gmail.com" ))))
      (add-to-list 'mu4e-contexts
                   (make-mu4e-context
                    :name "fastmail"
                    :enter-func (lambda () (mu4e-message "Entering FastMail context"))
                    :leave-func (lambda () (mu4e-message "Leaving FastMail context"))
                    :match-func (lambda (msg)
                                  (when msg
                                    (string-match-p "^/fastmail" (mu4e-message-field msg :maildir))))
                    :vars '( ( user-mail-address      . "ddavis@ddavis.io" )
                             ( user-email-address     . "ddavis@ddavis.io" )
                             ( user-full-name         . "Doug Davis" )
                             ( mu4e-trash-folder      . "/fastmail/Trash" )
                             ( mu4e-sent-folder       . "/fastmail/Sent" )
                             ( mu4e-drafts-folder     . "/fastmail/Drafts" )
                             ( mu4e-reply-to-address  . "ddavis@ddavis.io" )))))


    (setq mu4e-bookmarks ())
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Unread short"
                  :query "flag:unread and (m:/duke* or m:/cern* or m:/fastmail/INBOX or m:/gmail/INBOX*)"
                  :key ?u))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Recent personal"
                  :query "date:14d..now and (m:/fastmail/INBOX or m:/gmail/INBOX*)"
                  :key ?p))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Unread all"
                  :query "flag:unread and not flag:trashed"
                  :key ?U))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "INBOXes"
                  :query "m:/duke/INBOX or m:/cern/INBOX or m:/fastmail/INBOX or m:/gmail/INBOX"
                  :key ?i))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Last day's work"
                  :query "date:1d..now and not m:/fastmail* and not m:/gmail*"
                  :key ?w))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Recent work"
                  :query "date:3d..now and not m:/fastmail* and not m:/gmail*"
                  :key ?r))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Duke recent"
                  :query "date:5d..now and m:/duke*"
                  :key ?d))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "CERN recent"
                  :query "date:2d..now and m:/cern*"
                  :key ?c))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Emacs"
                  :query "m:/fastmail/Lists/emacs-devel or m:/fastmail/Lists/help-gnu-emacs"
                  :key ?e))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Last 1 day"
                  :query "date:1d..now"
                  :key ?1))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Last 3 days"
                  :query "date:3d..now"
                  :key ?3))
    (add-to-list 'mu4e-bookmarks
                 (make-mu4e-bookmark
                  :name "Last 7 days"
                  :query "date:1w..now"
                  :key ?7))

    (setq mu4e-compose-reply-ignore-address
          '("notifications@github\\.com"
            "ddavis@ddavis\\.io"
            "ddavis@phy\\.duke\\.edu"
            "douglas\\.davis\\.092@gmail\\.com"
            "douglas\\.davis@duke\\.edu"
            "douglas\\.davis@cern\\.ch"
            "ddavis@cern\\.ch"))

    (setq w3m-default-desplay-inline-images t)

    (defun mu4e-action-view-in-w3m ()
      "View the body of the message in emacs w3m."
      (interactive)
      (w3m-browse-url (concat "file://"
                              (mu4e~write-body-to-html (mu4e-message-at-point t)))))
    (define-key mu4e-view-mode-map (kbd "M") 'mu4e-action-view-in-w3m)

    (defun ddavis/mu4e-toggle-gnus ()
      (interactive)
      (setq mu4e-view-use-gnus (not mu4e-view-use-gnus)))

    (define-key mu4e-headers-mode-map (kbd "C-c g") 'ddavis/mu4e-toggle-gnus)


    ;; (when ddavis-v-enable-mu4e
    ;;   (use-package visual-fill-column
    ;;     :ensure t
    ;;     :after mu4e
    ;;     :hook ((visual-line-mode . visual-fill-column-mode)
    ;;            (mu4e-view-mode . visual-line-mode))
    ;;     :config
    ;;     (add-hook 'mu4e-view-mode-hook
    ;;               (lambda () (setq-local fill-column 98))))

    ;; (use-package mu4e-maildirs-extension
    ;;   :ensure t
    ;;   :after mu4e
    ;;   :config
    ;;   (mu4e-maildirs-extension)))

    )

#+end_src

* IRC

I haven't really been able to make up my mind on using the builtin
Emacs IRC client [[https://www.emacswiki.org/emacs/ERC][ERC]] or the third party client [[https://github.com/jorgenschaefer/circe][Circe]]. This configures
usage of both.

** Circe Utilities

#+begin_src emacs-lisp :results silent
  (defun ddavis/irc-pw-freenode (server)
    (password-store-get "Freenode"))

  (defun ddavis/irc-pw-gitter (server)
    (password-store-get "Gitter"))

  (defun circe-network-connected-p (network)
    "Return non-nil if there's any Circe server-buffer whose
    `circe-server-netwok' is NETWORK."
    (catch 'return
      (dolist (buffer (circe-server-buffers))
        (with-current-buffer buffer
          (if (string= network circe-server-network)
              (throw 'return t))))))

  (defun circe-maybe-connect (network)
    "Connect to NETWORK, but ask user for confirmation if it's
    already been connected to."
    (interactive "sNetwork: ")
    (if (or (not (circe-network-connected-p network))
            (y-or-n-p (format "Already connected to %s, reconnect?" network)))
        (circe network)))

  (defun ddavis/circe-prompt ()
    (lui-set-prompt
     (concat (propertize (concat "[" (buffer-name) "] >")
                         'face 'circe-prompt-face)
             " ")))
#+end_src

** Circe Setup

#+begin_src emacs-lisp :results silent
  (use-package password-store
    :when ddavis-v-enable-irc
    :ensure t)

  (use-package circe
    :when ddavis-v-enable-irc
    :ensure t
    :config
    (setq circe-reduce-lurker-spam t
          circe-network-options
          `(("Freenode"
             :nick "ddavis"
             :nickserv-password ddavis/irc-pw-freenode
             :nickserv-identify-confirmation "Freenode password accepted for ddavis"
             :tls t)
            ("Gitter"
             :server-buffer-name "Gitter"
             :host "irc.gitter.im"
             :port "6697"
             :nick "douglasdavis"
             :pass ddavis/irc-pw-gitter
             :tls t)))
    (require 'circe-color-nicks)
    (setq circe-color-nicks-pool-type
          '("#fb4934" "#b8bb26" "#fabd2f" "#83a598" "#d3869b" "#8ec07c" "#fe8019"
            "#cc241d" "#98971a" "#d79921" "#458588" "#b16286" "#689d6a" "#d65d0e"))
    (enable-circe-color-nicks)
    (setq circe-use-cycle-completion t
          circe-format-say "<{nick}> {body}"
          circe-color-nicks-everywhere t)
    (setq helm-mode-no-completion-in-region-in-modes
          '(circe-channel-mode
            circe-query-mode
            circe-server-mode))
    (add-hook 'circe-chat-mode-hook 'ddavis/circe-prompt)
    (setq circe-default-part-message
          (concat "Closed Circe (" circe-version ") buffer in GNU Emacs (" emacs-version ")"))
    (setq circe-default-part-message
          (concat "Quit Circe (" circe-version ") buffer in GNU Emacs (" emacs-version ")")))

  (use-package helm-circe
    :when ddavis-v-enable-irc
    :after circe
    :ensure t
    :bind (:map helm-command-map ("i" . helm-circe))
    :config
    (when ddavis-v-is-mac
      (global-set-key (kbd "s-i") 'helm-circe)))
#+end_src

** ERC Utilities

#+begin_src emacs-lisp :results silent
  (defvar ddavis-nick-face-list '()
    "See https://www.emacswiki.org/emacs/ErcNickColors#toc1")

  (defvar ddavis-erc-colors-list
    '("#fb4934" "#b8bb26" "#fabd2f" "#83a598" "#d3869b" "#8ec07c" "#fe8019"
      "#cc241d" "#98971a" "#d79921" "#458588" "#b16286" "#689d6a" "#d65d0e")
    "See https://www.emacswiki.org/emacs/ErcNickColors#toc1")

  (defun ddavis/build-nick-face-list ()
    "See https://www.emacswiki.org/emacs/ErcNickColors#toc1"
    (setq i -1)
    (setq ddavis-nick-face-list
          (mapcar
           (lambda (COLOR)
             (setq i (1+ i))
             (list (custom-declare-face
                    (make-symbol (format "erc-nick-face-%d" i))
                    (list (list t (list :foreground COLOR)))
                    (format "Nick face %d" i))))
           ddavis-erc-colors-list)))

  (defun ddavis/erc-insert-modify-hook ()
    "See https://www.emacswiki.org/emacs/ErcNickColors#toc1"
    (if (null ddavis-nick-face-list) (ddavis/build-nick-face-list))
    (save-excursion
      (goto-char (point-min))
      (if (looking-at "<\\([^>]*\\)>")
          (let ((nick (match-string 1)))
            (put-text-property (match-beginning 1) (match-end 1)
                               'face (nth
                                      (mod (string-to-number
                                            (substring (md5 nick) 0 4) 16)
                                           (length ddavis-nick-face-list))
                                      ddavis-nick-face-list))))))

  (defun ddavis/erc-notify (nickname message)
    "Displays a notification message for ERC."
    (let* ((channel (buffer-name))
           (nick (erc-hl-nicks-trim-irc-nick nickname))
           (title (if (string-match-p (concat "^" nickname) channel)
                      nick
                    (concat nick " (" channel ")")))
           (msg (s-trim (s-collapse-whitespace message))))
      (alert (concat nick ": " msg) :title title)))
#+end_src

** ERC Setup

#+begin_src emacs-lisp :results silent
  (use-package erc
    :when ddavis-v-enable-irc
    :hook (erc-notify . ddavis/erc-notify)
    :custom-face
    (erc-notice-face ((t (:foreground "#ebcb8b"))))
    :config
    (setq erc-hide-list '("JOIN" "PART" "QUIT")
          erc-user-full-name "Doug Davis"
          erc-prompt-for-password nil
          erc-track-enable-keybindings nil
          erc-kill-server-buffer-on-quit t
          erc-kill-buffer-on-part t
          erc-fill-function 'erc-fill-static
          erc-fill-static-center 20
          erc-prompt (lambda () (concat "[" (buffer-name) "] >")))

    ;; See https://www.emacswiki.org/emacs/ErcNickColors#toc1
    (add-hook 'erc-insert-modify-hook 'ddavis/erc-insert-modify-hook))

  (use-package erc-track
    :when ddavis-v-enable-irc
    :after erc
    :config
    (erc-track-mode t)
    (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                    "324" "329" "332" "333" "353" "477")))
#+end_src

* Helpful

#+begin_src emacs-lisp :results silent
  (use-package helpful
    :ensure t
    :bind (("C-h f" . #'helpful-callable)
           ("C-h v" . #'helpful-variable)
           ("C-h k" . #'helpful-key)))
#+end_src

* Hydra
** installation

#+begin_src emacs-lisp :results silent
  (use-package hydra
    :ensure t)
#+end_src

** projectile

#+begin_src emacs-lisp :results silent
  (defhydra hydra-projectile-other-window (:color teal)
    "projectile-other-window"
    ("f"  projectile-find-file-other-window        "file")
    ("g"  projectile-find-file-dwim-other-window   "file dwim")
    ("d"  projectile-find-dir-other-window         "dir")
    ("b"  projectile-switch-to-buffer-other-window "buffer")
    ("q"  nil                                      "cancel" :color blue))

  (defhydra hydra-projectile (:color teal :hint nil)
    "
       PROJECTILE: %(projectile-project-root)

       Find File            Search/Tags          Buffers                Cache
  ------------------------------------------------------------------------------------------
    _f_: file           _r_: ripgrep       _i_: ibuffer           _c_: cache clear
  _s-f_: file dwim      _o_: multi-occer   _b_: switch to buffer  _x_: remove known project
  _s-d_: file curr dir  ^ ^                _K_: kill all buffers  _X_: cleanup non-existing
    _d_: dir            ^ ^                ^ ^                    _z_: cache current

  "
    ("b"   projectile-switch-to-buffer)
    ("c"   projectile-invalidate-cache)
    ("d"   projectile-find-dir)
    ("f"   projectile-find-file)
    ("s-f" projectile-find-file-dwim)
    ("s-d" projectile-find-file-in-directory)
    ("i"   projectile-ibuffer)
    ("K"   projectile-kill-buffers)
    ("m"   projectile-multi-occur)
    ("o"   projectile-multi-occur)
    ("s-p" projectile-switch-project "switch project")
    ("p"   projectile-switch-project)
    ("s"   projectile-switch-project)
    ("r"   ddavis/helm-project-search)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("z"   projectile-cache-current-file)
    ("`"   hydra-projectile-other-window/body "other window")
    ("q"   nil "cancel" :color blue))

  (define-key projectile-mode-map (kbd "C-c p") 'hydra-projectile/body)
#+end_src

** dired

#+begin_src emacs-lisp :results silent
  (defhydra hydra-dired (:hint nil :color pink)
    "
  _+_ mkdir          _v_ view         _m_ mark           _(_ details        _i_ insert-subdir  wdired
  _C_ copy           _O_ view other   _U_ unmark all     _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
  _D_ delete         _o_ open other   _u_ unmark         _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
  _R_ rename         _M_ chmod        _t_ toggle         _g_ revert buf     _e_ ediff          C-c ESC : abort
  _Y_ rel symlink    _G_ chgrp        _E_ extension mark _s_ sort           _=_ pdiff
  _S_ symlink        ^ ^              _F_ find marked    _._ toggle hydra   \\ flyspell
  _r_ rsync          ^ ^              ^ ^                ^ ^                _?_ summary
  _z_ compress-file  _A_ find regexp
  _Z_ compress       _Q_ repl regexp

  T - tag prefix
  "
    ("\\" dired-do-ispell)
    ("(" dired-hide-details-mode)
    (")" dired-omit-mode)
    ("+" dired-create-directory)
    ("=" diredp-ediff)         ;; smart diff
    ("?" dired-summary)
    ("$" diredp-hide-subdir-nomove)
    ("A" dired-do-find-regexp)
    ("C" dired-do-copy)        ;; Copy all marked files
    ("D" dired-do-delete)
    ("E" dired-mark-extension)
    ("e" dired-ediff-files)
    ("F" dired-do-find-marked-files)
    ("G" dired-do-chgrp)
    ("g" revert-buffer)        ;; read all directories again (refresh)
    ("i" dired-maybe-insert-subdir)
    ("l" dired-do-redisplay)   ;; relist the marked or singel directory
    ("M" dired-do-chmod)
    ("m" dired-mark)
    ("O" dired-display-file)
    ("o" dired-find-file-other-window)
    ("Q" dired-do-find-regexp-and-replace)
    ("R" dired-do-rename)
    ("r" dired-do-rsynch)
    ("S" dired-do-symlink)
    ("s" dired-sort-toggle-or-edit)
    ("t" dired-toggle-marks)
    ("U" dired-unmark-all-marks)
    ("u" dired-unmark)
    ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
    ("w" dired-kill-subdir)
    ("Y" dired-do-relsymlink)
    ("z" diredp-compress-this-file)
    ("Z" dired-do-compress)
    ("q" nil)
    ("." nil :color blue))

  (define-key dired-mode-map "." 'hydra-dired/body)
#+end_src

** lsp

#+begin_src emacs-lisp :results silent
  (defhydra hydra-lsp (:exit t :hint nil)
    "
   Buffer^^               Server^^                   Symbol
  -------------------------------------------------------------------------------------
   [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
   [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
   [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
    ("d" lsp-find-declaration)
    ("D" lsp-ui-peek-find-definitions)
    ("R" lsp-ui-peek-find-references)
    ("i" lsp-ui-peek-find-implementation)
    ("t" lsp-find-type-definition)
    ("s" lsp-signature-help)
    ("o" lsp-describe-thing-at-point)
    ("r" lsp-rename)

    ("f" lsp-format-buffer)
    ("m" lsp-ui-imenu)
    ("x" lsp-execute-code-action)

    ("M-s" lsp-describe-session)
    ("M-r" lsp-restart-workspace)
    ("S" lsp-shutdown-workspace))

  (define-key lsp-mode-map (kbd "C-c l") 'hydra-lsp/body)
#+end_src

* End

end
